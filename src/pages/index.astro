---
import DefaultLayout from '../layouts/DefaultLayout.astro'
import UserCard from '../components/UserCard.astro'
import TimeCard from '../components/TimeCard.astro'
// get data
// const response = await fetch('https://markteekman.nl/data.json')
// const data = await response.json()
// set categories
const items = ["work", "play", "study", "exercise", "social", "self care"]
// get current stat (daily, weekly, montly)
// documment query select all stat a's
// add stats active class toggle JS in UserCard
// const currentStat = classList.contains('active')
// display currentStat in 'Last ${currentStat} - workCurrent'
// if (currentStat === 'daily')
// then const workCurrent = JSON.stringify(data[0].timeframes.daily.current)
// and const workPrevious = JSON.stringify(data[0].timeframes.daily.previous)
// and const playCurrent = JSON.stringify(data[1].timeframes.daily.current)
// etc..
// else if (currentStat === 'weekly')
// then const workCurrent = JSON.stringify(data[0].timeframes.weekly.current)
// etc..
---
<DefaultLayout title="Frontend Mentor">
  <div class="container">
    <UserCard username="Jeremy Robson" />
    {items.map((item) => (
      <TimeCard 
        category="{item}" 
      />
    ))}
  </div>
</DefaultLayout>

<script>
  // variables
  const stats = [...document.querySelector('.card-actions').children]
  const timeCards = [...document.querySelectorAll('.time-card')]

  // execution
  fetch('https://markteekman.github.io/time-tracking-dashboard/data.json')
  .then(response => response.json())
  .then(data => {
    // function to set current stats
    function showStats(timeCard, index, currentStat, previousText) {
      const stat = currentStat.innerText.toLowerCase()
      const current = timeCard.querySelector('.current-hrs')
      const previous = timeCard.querySelector('.previous-hrs')
      current.innerText = `${data[index].timeframes[stat].current}hrs`
      previous.innerText = `${previousText} - ${data[index].timeframes[stat].previous}hrs`
    }
    // add event listener for each stat
    stats.forEach(stat => {
      stat.addEventListener('click', event => {
        // remove active class
        stats.forEach(stat => {
          stat.classList.remove('active')
          stat.removeAttribute('aria-current')
        })
        // get currently clicked item and add active class
        const currentStat = event.target
        currentStat.classList.add('active')
        currentStat.setAttribute('aria-current', 'true')
        // get data corresponding to selected stat
        if (currentStat.innerText === 'Daily') {
          timeCards.forEach((timeCard, index) => {
            const previousText = 'Yesterday'
            showStats(timeCard, index, currentStat, previousText)
          })
        } else if (currentStat.innerText === 'Weekly') {
          timeCards.forEach((timeCard, index) => {
            const previousText = 'Last week'
            showStats(timeCard, index, currentStat, previousText)
          })
        } else if (currentStat.innerText === 'Monthly') {
          timeCards.forEach((timeCard, index) => {
            const previousText = 'Last month'
            showStats(timeCard, index, currentStat, previousText)
          })
        }
      })
    })
  })
  .catch(error => console.log(error))
</script>

<style lang="scss" global>
  @use "../styles/base/breakpoint" as *;

  .container {
    display: grid;
    grid-gap: 1rem;
    margin: 5rem 0;

    @include breakpoint(large) {
      grid-template-areas: 
        "user work play study"
        "user exersice social self";

      > :first-child {
        grid-area: user;
      }
    }

    > * {
      animation: fade-in 0.3s ease-in-out forwards;

      @for $i from 0 through 7 {
        &:nth-child(#{$i + 1}) {
          animation-delay: 0.15s * $i;
        }
      }
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(2rem);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>